SelectionSort(A):
    for i = 0 to length(A) - 1:
        minIndex = i
        for j = i + 1 to length(A):
            if A[j] < A[minIndex]:
                minIndex = j
        swap A[i] and A[minIndex]



InsertionSort(A):
    for i = 1 to length(A) - 1:
        key = A[i]
        j = i - 1
        while j >= 0 and A[j] > key:
            A[j + 1] = A[j]
            j = j - 1
        A[j + 1] = key



MergeSort(A):
    if length(A) > 1:
        mid = length(A) // 2
        left = A[0...mid]
        right = A[mid+1...end]

        MergeSort(left)
        MergeSort(right)

        Merge(left, right, A)

Merge(left, right, A):
    i = 0, j = 0, k = 0
    while i < length(left) and j < length(right):
        if left[i] < right[j]:
            A[k] = left[i]
            i = i + 1
        else:
            A[k] = right[j]
            j = j + 1
        k = k + 1

    while i < length(left):
        A[k] = left[i]
        i = i + 1
        k = k + 1

    while j < length(right):
        A[k] = right[j]
        j = j + 1
        k = k + 1



QuickSort(A, low, high):
    if low < high:
        pivot = Partition(A, low, high)
        QuickSort(A, low, pivot - 1)
        QuickSort(A, pivot + 1, high)

Partition(A, low, high):
    pivot = A[high]
    i = low - 1
    for j = low to high - 1:
        if A[j] < pivot:
            i = i + 1
            swap A[i] and A[j]
    swap A[i + 1] and A[high]
    return i + 1



BFS(graph, start):
    create a queue Q
    create a set visited
    enqueue start into Q
    add start to visited
    
    while Q is not empty:
        node = dequeue from Q
        visit(node)
        
        for each neighbor of node:
            if neighbor not in visited:
                enqueue neighbor into Q
                add neighbor to visited



DFS(graph, node, visited):
    visit(node)
    add node to visited
    
    for each neighbor of node:
        if neighbor not in visited:
            DFS(graph, neighbor, visited)



DFS(graph, start):
    create a stack S
    create a set visited
    push start into S
    add start to visited
    
    while S is not empty:
        node = pop from S
        visit(node)
        
        for each neighbor of node:
            if neighbor not in visited:
                push neighbor into S
                add neighbor to visited



def dijkstra(graph, start):
    pq = [(0, start)]
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    
    while pq:
        current_distance, current_node = heapq.heappop(pq)
        
        if current_distance > distances[current_node]:
            continue
        
        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))
    
    return distances



class BellmanFord:
    def __init__(self, vertices):
        self.V = vertices
        self.edges = []

    def add_edge(self, u, v, weight):
        self.edges.append((u, v, weight))

    def bellman_ford(self, src):
        distance = [float("inf")] * self.V
        distance[src] = 0

        for _ in range(self.V - 1):
            for u, v, weight in self.edges:
                if distance[u] != float("inf") and distance[u] + weight < distance[v]:
                    distance[v] = distance[u] + weight

        for u, v, weight in self.edges:
            if distance[u] != float("inf") and distance[u] + weight < distance[v]:
                print("Graph contains a negative weight cycle")
                return None

        return distance



def prims_algorithm(graph, V):
    selected = [False] * V
    edge_count = 0
    selected[0] = True
    mst_cost = 0

    print("\nEdge added to MST and their weights:")
    print("From  To   Weight")

    while edge_count < V - 1:
        minimum = float('inf')
        x = 0
        y = 0

        for i in range(V):
            if selected[i]:
                for j in range(V):
                    if not selected[j] and graph[i][j]:
                        if minimum > graph[i][j]:
                            minimum = graph[i][j]
                            x = i
                            y = j

        print(f"  {x}   - {y}     {graph[x][y]}")
        mst_cost += graph[x][y]
        selected[y] = True
        edge_count += 1
